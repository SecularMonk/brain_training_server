scalar ObjectId
scalar UserId
scalar QuizId
scalar QuestionId
scalar AnswerId
scalar Date

type Query {
   getUser(userId: String!): User
   getAnything: [Icon]
   requestQuiz(userId: String!, numQuestions: Int): Quiz
}

type Mutation {
   addAnswer(answer: AnswerInput): AnswerMutationResponse
   getQuiz(userId: UserId): Quiz
}

type Icon {
   _id: ObjectId
   type: String
   base64: String
   description: String
}

type User {
   _id: UserId
   username: String
}

type Quiz {
   _id: QuizId!
   userId: UserId!
   questions: [Question]
   score: Int
   createdAt: Date!
}

type Question {
   _id: QuestionId!
   quizId: QuizId!
}

type Answer {
   _id: AnswerId
   questionId: QuestionId!
   problemStatement: String
   correct: Boolean
}

type AnswerMutationResponse {
   userId: UserId
   questionId: QuestionId!
   correct: Boolean!
   score: Int
}

input AnswerInput {
   userId: UserId!
}
